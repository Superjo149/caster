"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _requestResponse = _interopRequireDefault(require("./request-response"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ReceiverController extends _requestResponse.default {
  constructor(client, sourceId, destinationId) {
    super(client, sourceId, destinationId, 'urn:x-cast:com.google.cast.receiver');
    const self = this;

    function onMessage(data, broadcast) {
      if (!broadcast) return;
      if (data.type === 'RECEIVER_STATUS') self.emit('status', data.status);
    }

    function onClose() {
      self.removeListener('message', onMessage);
    }

    this.on('message', onMessage);
    this.once('close', onClose);
  }
  /**
   * Get the status
   */


  async getStatus() {
    const response = await this.request({
      type: 'GET_STATUS'
    });
    return response.status;
  }
  /**
   * Get app availability
   */


  async getAppAvailability(appId) {
    const response = await this.request({
      type: 'GET_APP_AVAILABILITY',
      appId: Array.isArray(appId) ? appId : [appId]
    });
    return response.availability;
  }
  /**
   * Launch an App with its ID
   */


  async launch(appId) {
    const response = await this.request({
      type: 'LAUNCH',
      appId
    });
    if (response.type === 'LAUNCH_ERROR') throw new Error(`Launch failed. Reason: ${response.reason}`);
    return response.status.applications || [];
  }
  /**
   * Stop a session with its ID
   */


  async stop(sessionId) {
    const response = await this.request({
      type: 'STOP',
      sessionId
    });
    return response.status.applications || [];
  }
  /**
   * Set the volume
   */


  async setVolume(options) {
    const response = await this.request({
      type: 'SET_VOLUME',
      volume: options
    });
    return response.status.volume || [];
  }
  /**
   * Get the volume
   */


  async getVolume() {
    const status = await this.getStatus();
    return status.volume;
  }
  /**
   * Get the sessions
   */


  async getSessions() {
    const status = await this.getStatus();
    return status.applications || [];
  }

}

exports.default = ReceiverController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVycy9yZWNlaXZlci50cyJdLCJuYW1lcyI6WyJSZWNlaXZlckNvbnRyb2xsZXIiLCJSZXF1ZXN0UmVzcG9uc2VDb250cm9sbGVyIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJzb3VyY2VJZCIsImRlc3RpbmF0aW9uSWQiLCJzZWxmIiwib25NZXNzYWdlIiwiZGF0YSIsImJyb2FkY2FzdCIsInR5cGUiLCJlbWl0Iiwic3RhdHVzIiwib25DbG9zZSIsInJlbW92ZUxpc3RlbmVyIiwib24iLCJvbmNlIiwiZ2V0U3RhdHVzIiwicmVzcG9uc2UiLCJyZXF1ZXN0IiwiZ2V0QXBwQXZhaWxhYmlsaXR5IiwiYXBwSWQiLCJBcnJheSIsImlzQXJyYXkiLCJhdmFpbGFiaWxpdHkiLCJsYXVuY2giLCJFcnJvciIsInJlYXNvbiIsImFwcGxpY2F0aW9ucyIsInN0b3AiLCJzZXNzaW9uSWQiLCJzZXRWb2x1bWUiLCJvcHRpb25zIiwidm9sdW1lIiwiZ2V0Vm9sdW1lIiwiZ2V0U2Vzc2lvbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7OztBQUVlLE1BQU1BLGtCQUFOLFNBQWlDQyx3QkFBakMsQ0FBMkQ7QUFDeEVDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFpQkMsUUFBakIsRUFBbUNDLGFBQW5DLEVBQTBEO0FBQ25FLFVBQ0VGLE1BREYsRUFFRUMsUUFGRixFQUdFQyxhQUhGLEVBSUUscUNBSkY7QUFNQSxVQUFNQyxJQUFJLEdBQUcsSUFBYjs7QUFDQSxhQUFTQyxTQUFULENBQ0VDLElBREYsRUFFRUMsU0FGRixFQUdFO0FBQ0EsVUFBSSxDQUFDQSxTQUFMLEVBQWdCO0FBQ2hCLFVBQUlELElBQUksQ0FBQ0UsSUFBTCxLQUFjLGlCQUFsQixFQUFxQ0osSUFBSSxDQUFDSyxJQUFMLENBQVUsUUFBVixFQUFvQkgsSUFBSSxDQUFDSSxNQUF6QjtBQUN0Qzs7QUFFRCxhQUFTQyxPQUFULEdBQW1CO0FBQ2pCUCxNQUFBQSxJQUFJLENBQUNRLGNBQUwsQ0FBb0IsU0FBcEIsRUFBK0JQLFNBQS9CO0FBQ0Q7O0FBRUQsU0FBS1EsRUFBTCxDQUFRLFNBQVIsRUFBbUJSLFNBQW5CO0FBQ0EsU0FBS1MsSUFBTCxDQUFVLE9BQVYsRUFBbUJILE9BQW5CO0FBQ0Q7QUFFRDs7Ozs7QUFHQSxRQUFNSSxTQUFOLEdBQWdDO0FBQzlCLFVBQU1DLFFBQVEsR0FBRyxNQUFNLEtBQUtDLE9BQUwsQ0FBYTtBQUNsQ1QsTUFBQUEsSUFBSSxFQUFFO0FBRDRCLEtBQWIsQ0FBdkI7QUFJQSxXQUFPUSxRQUFRLENBQUNOLE1BQWhCO0FBQ0Q7QUFFRDs7Ozs7QUFHQSxRQUFNUSxrQkFBTixDQUF5QkMsS0FBekIsRUFBeUU7QUFDdkUsVUFBTUgsUUFBUSxHQUFHLE1BQU0sS0FBS0MsT0FBTCxDQUFhO0FBQ2xDVCxNQUFBQSxJQUFJLEVBQUUsc0JBRDRCO0FBRWxDVyxNQUFBQSxLQUFLLEVBQUVDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixLQUFkLElBQXVCQSxLQUF2QixHQUErQixDQUFDQSxLQUFEO0FBRkosS0FBYixDQUF2QjtBQUtBLFdBQU9ILFFBQVEsQ0FBQ00sWUFBaEI7QUFDRDtBQUVEOzs7OztBQUdBLFFBQU1DLE1BQU4sQ0FBYUosS0FBYixFQUE0QjtBQUMxQixVQUFNSCxRQUFRLEdBQUcsTUFBTSxLQUFLQyxPQUFMLENBQWE7QUFDbENULE1BQUFBLElBQUksRUFBRSxRQUQ0QjtBQUVsQ1csTUFBQUE7QUFGa0MsS0FBYixDQUF2QjtBQUtBLFFBQUlILFFBQVEsQ0FBQ1IsSUFBVCxLQUFrQixjQUF0QixFQUNFLE1BQU0sSUFBSWdCLEtBQUosQ0FBVywwQkFBeUJSLFFBQVEsQ0FBQ1MsTUFBTyxFQUFwRCxDQUFOO0FBRUYsV0FBT1QsUUFBUSxDQUFDTixNQUFULENBQWdCZ0IsWUFBaEIsSUFBZ0MsRUFBdkM7QUFDRDtBQUVEOzs7OztBQUdBLFFBQU1DLElBQU4sQ0FBV0MsU0FBWCxFQUE4QjtBQUM1QixVQUFNWixRQUFRLEdBQUcsTUFBTSxLQUFLQyxPQUFMLENBQWE7QUFDbENULE1BQUFBLElBQUksRUFBRSxNQUQ0QjtBQUVsQ29CLE1BQUFBO0FBRmtDLEtBQWIsQ0FBdkI7QUFLQSxXQUFPWixRQUFRLENBQUNOLE1BQVQsQ0FBZ0JnQixZQUFoQixJQUFnQyxFQUF2QztBQUNEO0FBRUQ7Ozs7O0FBR0EsUUFBTUcsU0FBTixDQUFnQkMsT0FBaEIsRUFBaUM7QUFDL0IsVUFBTWQsUUFBUSxHQUFHLE1BQU0sS0FBS0MsT0FBTCxDQUFhO0FBQ2xDVCxNQUFBQSxJQUFJLEVBQUUsWUFENEI7QUFFbEN1QixNQUFBQSxNQUFNLEVBQUVEO0FBRjBCLEtBQWIsQ0FBdkI7QUFLQSxXQUFPZCxRQUFRLENBQUNOLE1BQVQsQ0FBZ0JxQixNQUFoQixJQUEwQixFQUFqQztBQUNEO0FBRUQ7Ozs7O0FBR0EsUUFBTUMsU0FBTixHQUFtQztBQUNqQyxVQUFNdEIsTUFBTSxHQUFHLE1BQU0sS0FBS0ssU0FBTCxFQUFyQjtBQUVBLFdBQU9MLE1BQU0sQ0FBQ3FCLE1BQWQ7QUFDRDtBQUVEOzs7OztBQUdBLFFBQU1FLFdBQU4sR0FBdUM7QUFDckMsVUFBTXZCLE1BQU0sR0FBRyxNQUFNLEtBQUtLLFNBQUwsRUFBckI7QUFFQSxXQUFPTCxNQUFNLENBQUNnQixZQUFQLElBQXVCLEVBQTlCO0FBQ0Q7O0FBdkd1RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudCB9IGZyb20gJ2Nhc3R2Mic7XG5pbXBvcnQgUmVxdWVzdFJlc3BvbnNlQ29udHJvbGxlciBmcm9tICcuL3JlcXVlc3QtcmVzcG9uc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWNlaXZlckNvbnRyb2xsZXIgZXh0ZW5kcyBSZXF1ZXN0UmVzcG9uc2VDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoY2xpZW50OiBDbGllbnQsIHNvdXJjZUlkOiBzdHJpbmcsIGRlc3RpbmF0aW9uSWQ6IHN0cmluZykge1xuICAgIHN1cGVyKFxuICAgICAgY2xpZW50LFxuICAgICAgc291cmNlSWQsXG4gICAgICBkZXN0aW5hdGlvbklkLFxuICAgICAgJ3Vybjp4LWNhc3Q6Y29tLmdvb2dsZS5jYXN0LnJlY2VpdmVyJ1xuICAgICk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb25NZXNzYWdlKFxuICAgICAgZGF0YTogeyB0eXBlOiBzdHJpbmc7IHN0YXR1czogc3RyaW5nIH0sXG4gICAgICBicm9hZGNhc3Q6IHVuZGVmaW5lZCB8IE9iamVjdFxuICAgICkge1xuICAgICAgaWYgKCFicm9hZGNhc3QpIHJldHVybjtcbiAgICAgIGlmIChkYXRhLnR5cGUgPT09ICdSRUNFSVZFUl9TVEFUVVMnKSBzZWxmLmVtaXQoJ3N0YXR1cycsIGRhdGEuc3RhdHVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNsb3NlKCkge1xuICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcignbWVzc2FnZScsIG9uTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgdGhpcy5vbignbWVzc2FnZScsIG9uTWVzc2FnZSk7XG4gICAgdGhpcy5vbmNlKCdjbG9zZScsIG9uQ2xvc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3RhdHVzXG4gICAqL1xuICBhc3luYyBnZXRTdGF0dXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucmVxdWVzdCh7XG4gICAgICB0eXBlOiAnR0VUX1NUQVRVUydcbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZS5zdGF0dXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFwcCBhdmFpbGFiaWxpdHlcbiAgICovXG4gIGFzeW5jIGdldEFwcEF2YWlsYWJpbGl0eShhcHBJZDogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnJlcXVlc3Qoe1xuICAgICAgdHlwZTogJ0dFVF9BUFBfQVZBSUxBQklMSVRZJyxcbiAgICAgIGFwcElkOiBBcnJheS5pc0FycmF5KGFwcElkKSA/IGFwcElkIDogW2FwcElkXVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmF2YWlsYWJpbGl0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2ggYW4gQXBwIHdpdGggaXRzIElEXG4gICAqL1xuICBhc3luYyBsYXVuY2goYXBwSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHR5cGU6ICdMQVVOQ0gnLFxuICAgICAgYXBwSWRcbiAgICB9KTtcblxuICAgIGlmIChyZXNwb25zZS50eXBlID09PSAnTEFVTkNIX0VSUk9SJylcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTGF1bmNoIGZhaWxlZC4gUmVhc29uOiAke3Jlc3BvbnNlLnJlYXNvbn1gKVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cy5hcHBsaWNhdGlvbnMgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3RvcCBhIHNlc3Npb24gd2l0aCBpdHMgSURcbiAgICovXG4gIGFzeW5jIHN0b3Aoc2Vzc2lvbklkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucmVxdWVzdCh7XG4gICAgICB0eXBlOiAnU1RPUCcsXG4gICAgICBzZXNzaW9uSWRcbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMuYXBwbGljYXRpb25zIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdm9sdW1lXG4gICAqL1xuICBhc3luYyBzZXRWb2x1bWUob3B0aW9uczogT2JqZWN0KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnJlcXVlc3Qoe1xuICAgICAgdHlwZTogJ1NFVF9WT0xVTUUnLFxuICAgICAgdm9sdW1lOiBvcHRpb25zXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzLnZvbHVtZSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHZvbHVtZVxuICAgKi9cbiAgYXN5bmMgZ2V0Vm9sdW1lKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgdGhpcy5nZXRTdGF0dXMoKTtcblxuICAgIHJldHVybiBzdGF0dXMudm9sdW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc2Vzc2lvbnNcbiAgICovXG4gIGFzeW5jIGdldFNlc3Npb25zKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCB0aGlzLmdldFN0YXR1cygpO1xuXG4gICAgcmV0dXJuIHN0YXR1cy5hcHBsaWNhdGlvbnMgfHwgW107XG4gIH1cbn1cbiJdfQ==